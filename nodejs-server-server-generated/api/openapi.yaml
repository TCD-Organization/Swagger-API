openapi: 3.0.1
info:
  version: "1.0-oas3"
  title: 'TCD - JEE Server'
  contact: {}
servers:
- url: 'http://51.178.18.199:8080'
paths:

############
#   USER   #
############

  /register:
    post:
      summary: 'Register a User account'
      tags:
        - User
      operationId: RegisterUser
      deprecated: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
        description: Basic account informations
        required: true
      responses:
        '201':
          description: 'Created'
      
  /login:
    post:
      summary: 'Authenticate and get a token'
      tags:
        - Admin
        - User
      operationId: LoginUser
      deprecated: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
        description: 'Autenticate with Username and password, and get a token'
        required: true
      responses:
        '200':
          description: 'OK'
          headers:
            Authorization:
              description: 'Bearer {token}'
              schema:
                type: string
        '403':
          description: 'Wrong Username or Password'
      
    
#############
#   ADMIN   #
#############

  /register/admin:
    post:
      summary: 'Register an Admin User'
      tags:
        - Admin
      operationId: RegisterAdmin
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          description: 'An Admin token is required'
          schema:
            type: string
            default: 'Bearer {token}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminRequest'
        required: true
      responses:
        '201':
          description: 'Created'
        '403':
          description: 'Unauthorized'


################
#   DOCUMENT   #
################

  /document/all:
    get:
      summary: 'Get all my documents'
      tags:
        - Document
      operationId: GetDocumentList
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DocumentListRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'

  /document/{docId}:
    get:
      summary: 'Get one of my documents'
      tags:
        - Document
      operationId: GetDocument
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
        - in: path
          name: docId
          schema:
            type: integer
          required: true
          description: Numeric ID of document to get
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DocumentRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
      
  /document:
    post:
      summary: 'Create a new Document'
      tags:
        - Document
      operationId: CreateDocument
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
            examples:
              Text:
                value:
                  name: 'my-roman'
                  genre: 'roman'
                  content_type: 'text'
                  content: 'Here lies a bunch a flower, on the side of the road'
              Link:
                value:
                  name: 'my-roman'
                  genre: 'roman'
                  content_type: 'link'
                  content: 'https://wwW.my-host.com/roman.txt'
      responses:
        '201':
          description: 'Created'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreatedDocumentRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
          
################
#   ANALYSIS   #
################

  /analysis/all:
    get:
      summary: 'Get all my analysis'
      tags:
        - Analysis
      operationId: GetAnalysisList
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnalysisListRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
          
  /analysis:
    post:
      summary: 'Create a new Analysis'
      tags:
        - Analysis
      operationId: CreateAnalysis
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnalysisRequest'
      responses:
        '201':
          description: 'Created'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreatedAnalysisRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
          
  /analysis/{analysisId}:
    get:
      summary: 'Get one of my analysis'
      tags:
        - Analysis
      operationId: GetAnalysis
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
        - in: path
          name: analysisId
          schema:
            type: integer
          required: true
          description: Numeric ID of analysis to get
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnalysisRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
    delete:
      summary: 'Delete an Analysis'
      tags:
        - Analysis
      operationId: DeleteAnalysis
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A Runner token is required'
        - in: path
          name: docId
          schema:
            type: integer
          required: true
          description: Numeric ID of document
        - in: path
          name: analysisId
          schema:
            type: integer
          required: true
          description: Numeric ID of analysis to accept
      responses:
        '200':
          description: 'OK'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'

  /analysis/{analysisId}/progress:
    put:
      summary: 'Update an Analysis'
      tags:
        - Analysis
      operationId: UpdateAnalysis
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A Runner token is required'
        - in: path
          name: analysisId
          schema:
            type: integer
          required: true
          description: Numeric ID of analysis to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnalysisRequest'
      responses:
        '201':
          description: 'Updated'
        '304':
          description: 'Not Modified'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'
 
######################
#   ANALYSIS-TYPES   #
######################
 
  /analysis-types:
    get:
      summary: 'Get the list of analysis types'
      tags:
        - Analysis
      operationId: GetAnalysisTypes
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/AnalysisTypesRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'


##############
#   RUNNER   #
##############

  /runner:
    post:
      summary: 'Register a Runner'
      tags:
        - Runner
      operationId: RegisterRunner
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          description: 'An Admin token is required'
          schema:
            type: string
            default: 'Bearer {token}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRunnerRequest'
        required: true
      responses:
        '201':
          description: 'Created'
        '403':
          description: 'Unauthorized'

  /runner/connect:
    post:
      summary: 'Authenticate and get a token'
      tags:
        - Runner
      operationId: LoginRunner
      deprecated: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectRunnerRequest'
        description: 'Autenticate with Runnername, a Key and a reachable Port, then get a token'
        required: true
      responses:
        '200':
          description: 'OK'
          headers:
            Authorization:
              description: 'Bearer {token}'
              schema:
                type: string
        '403':
          description: 'Wrong Runnername or Key'
      
  /runner/all:
    get:
      summary: 'Get the list of runners'
      tags:
        - Runner
      operationId: GetRunnerList
      deprecated: false
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            default: 'Bearer {token}'
          description: 'A User or Admin token is required'
      responses:
        '200':
          description: 'Ok'
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/RunnerListRequest'
        '403':
          description: 'Unauthorized'
        '500':
          description: 'Internal Server Error'

tags:
  - name: User
  - name: Admin
  - name: Runner
  - name: Document
  - name: Analysis
  
components:
  schemas:
    RegisterUserRequest:
      title: RegisterUserRequest
      example:
        username: hello
        password: test
        email: test@testfr
        
    LoginUserRequest:
      title: LoginUserRequest
      example:
        username: hello
        password: test
        
    RegisterAdminRequest:
      title: RegisterAdminRequest
      example:
        username: admin
        password: test
        email: test@testfr
        
    CreateDocumentRequest:
      title: LoginAdminRequest
      example:
        name: 'roman-de-bernard'
        genre: 'roman'
        content_type: 'text / link / file'
        content: 'here lies a flower / https://myurl.com/ / null'
        
    CreatedDocumentRequest:
      title: CreatedDocumentRequest
      example:
        document_id: '1a2b3c'
          
    AnalysisListRequest:
      title: GetAnalysisListRequest
      example:
        analyses:
          - id: '5ee13788eeed0c00733e7e8a'
            name: "First analysis"
            type: "azoeu9214U0294U1"
            status: "TO_START"
            document_id: "5ede05103351343a1ea0f5e9"
            document_name: "testDocument"
            owner: "user"
            runner: null
            step_number: null
            total_steps: null
            step_name: null
            start_time: null
            lasting_time: null
            end_time: null
            result: null
            
          - id: "5ee1def44ed5195d704849a0"
            name: "Second analysis"
            type: "azoeu9214U0294U1"
            status: "FINISHED"
            document_id: "5ede05103351343a1ea0f5e9"
            document_name: "testDocument"
            owner: "user"
            runner: "runner2"
            step_number: 4
            total_steps: 4
            step_name: "init"
            start_time: "2020-06-11T07:37:14.939+0000"
            lasting_time: "0"
            end_time: "2020-06-11T07:38:15.498+0000"
            result: "test newspaper"
            
    CreateAnalysisRequest:
      title: CreateAnalysisRequest
      example:
        name: 'analysis-on-roman-de-bernard'
        type: SEMANTIC_ANALYSIS
        doc_id: '5ede05103351343a1ea0f5e9'
        
    CreatedAnalysisRequest:
      title: CreatedDocumentRequest
      example:
        analysis_id: '1a2b3c'
          
    UpdateAnalysisRequest:
      title: UpdateAnalysisRequest
      example:
        status: '1a2b3c'
        step_number: '1/3'
        step_name: 'DICTIONNARY_CHECK'
        lasting_time: 12312414
          
    AnalysisTypesRequest:
      title: UpdateAnalysisRequest
      example:
        types:
        - 'SEMANTIC_ANALYSIS'
        - 'OTHER...'
          
    RegisterRunnerRequest:
      title: RegisterRunnerRequest
      example:
        runnername: 'my-runner'
        key: '139FB'
        ip: '51.78.223.63'
        port: 8080
          
    ConnectRunnerRequest:
      title: ConnectRunnerRequest
      example:
        runnername: 'my-runner'
        key: '139FB'
       
    RunnerListRequest:
      title: RegisterRunnerRequest
      example:
        runners:
          - id: 'ObjectId()'
            runnername: 'my-runner'
            key: 'Encrypted()'
            
    DocumentListRequest:
      title: GetDocumentListRequest
      example:
        documents:
          - id: '5ede05103351343a1ea0f5e9'
            name: 'my-document'
            hash: '49C11DA52D38C0512FB8169340DB16F3'
            genre: 'roman'
            content: 'this is a test document'
            owner: 'user1'
            
          - id: '1adr05117543896a1ea0f5p8'
            name: 'my-document2'
            hash: '65C11DA52D38C0512DC8169340DB16J9'
            genre: 'newspaper'
            content: 'this is a news document'
            owner: 'user1'

    DocumentRequest:
      title: GetDocumentRequest
      example:
        id: '5ede05103351343a1ea0f5e9'
        name: 'my-document'
        hash: '49C11DA52D38C0512FB8169340DB16F3'
        genre: 'roman'
        content: 'this is a test document'
        owner: 'user1'
          
    AnalysisRequest:
      title: GetAnalysisRequest
      example:
        id: "5ee1def44ed5195d704849a0"
        name: "Second analysis"
        type: "azoeu9214U0294U1"
        status: FINISHED
        document_id: "5ede05103351343a1ea0f5e9"
        document_name: "testDocument"
        owner: "user"
        runner: "runner2"
        step_number: 4
        total_steps: 4
        step_name: "init"
        start_time: "2020-06-11T07:37:14.939+0000"
        lasting_time: "0"
        end_time: "2020-06-11T07:38:15.498+0000"
        result: "test newspaper"
